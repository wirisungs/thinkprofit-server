const { db } = require('../config/Firebase.config.db');
const admin = require('firebase-admin');

// üîë T·∫°o ID ng·∫´u nhi√™n cho ng∆∞·ªùi d√πng
const generateId = () => {
  return 'UID' + Math.floor(100000 + Math.random() * 900000).toString();
};

const registerUser = async (req, res) => {
  try {
    const { userName, userEmail, userPassword } = req.body;
    if (!userName || !userEmail || !userPassword) {
      return res.status(400).json({ message: 'Missing required fields' });
    }

    const userId = generateId();

    // üë§ T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi Firebase Auth
    const userRecord = await admin.auth().createUser({
      uid: userId,
      email: userEmail,
      password: userPassword,
      displayName: userName
    });

    // T·ª± ƒë·ªông g√°n role FREE cho ng∆∞·ªùi d√πng m·ªõi
    await admin.auth().setCustomUserClaims(userId, { role: 'FREE' });

    // üíæ L∆∞u th√¥ng tin b·ªï sung v√†o Firestore
    await db.collection('users').doc(userId).set({
      userName,
      userEmail,
      userRole: 'FREE', // M·∫∑c ƒë·ªãnh role l√† FREE
      userBalance: 0,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });

    res.status(201).json({
      message: 'User registered successfully',
      data: {
        uid: userId,
        email: userRecord.email,
        displayName: userRecord.displayName,
        role: 'FREE'
      }
    });
  } catch (error) {
    console.error('Error registering usser:', error);

    switch (error.code) {
      case 'auth/email-already-exists':
        return res.status(400).json({ message: 'Email already registered' });
      case 'auth/invalid-email':
        return res.status(400).json({ message: 'Invalid email format' });
      case 'auth/weak-password':
        return res.status(400).json({ message: 'Password should be at least 6 characters' });
      case 'auth/invalid-display-name':
        return res.status(400).json({ message: 'Invalid username format' });
      default:
        // üêõ Ghi log chi ti·∫øt ƒë·ªÉ g·ª° l·ªói
        console.error('Error detail:', {
          code: error.code,
          message: error.message,
          stack: error.stack
        });
        return res.status(500).json({
          message: 'Server error while registering user',
          error: error.message
        });
    }
  }
}

// üîë ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
// L∆∞u √Ω 1: Kh√¥ng c·∫ßn thi·∫øt l·∫Øm t·∫°i v√¨ ph·∫ßn login s·∫Ω n·∫±m ·ªü b√™n Flutter l√† ch√≠nh
const loginUser = async (req, res) => {
  try {
    const { userEmail, userPassword } = req.body;
    if (!userEmail || !userPassword) {
      return res.status(400).json({ message: 'Missing required fields' });
    }

    // üìù L∆∞u √Ω 2: ƒêƒÉng nh·∫≠p ph√≠a m√°y ch·ªß th∆∞·ªùng kh√¥ng c·∫ßn thi·∫øt v·ªõi Firebase Auth
    // üîí Client n√™n s·ª≠ d·ª•ng Firebase Auth SDK ƒë·ªÉ x√°c th·ª±c
    // üìå Endpoint n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng m√† kh√¥ng c·∫ßn ph·∫£i th√¥ng qua Firebase Auth SDK

    const userRecord = await admin.auth().getUserByEmail(userEmail);
    const userData = await db.collection('users').doc(userRecord.uid).get();

    // L·∫•y custom claims ƒë·ªÉ ki·ªÉm tra role
    const customClaims = await admin.auth().getUser(userRecord.uid);
    const userRole = customClaims.customClaims?.role || 'FREE';

    res.status(200).json({
      message: 'User logged in successfully',
      data: {
        uid: userRecord.uid,
        email: userRecord.email,
        displayName: userRecord.displayName,
        role: userRole,
        ...userData.data()
      }
    });
  } catch (error) {
    console.error('‚ùå Error when fetch user:', error);
    if (error.code === 'auth/user-not-found') {
      return res.status(404).json({ message: 'User not found' });
    }
    res.status(500).json({ message: 'Error retrieving user data' });
  }
}

// Th√™m h√†m m·ªõi ƒë·ªÉ n√¢ng c·∫•p t√†i kho·∫£n l√™n Premium
const upgradeToPremium = async (req, res) => {
  try {
    const { userId } = req.params;

    // C·∫≠p nh·∫≠t custom claims
    await admin.auth().setCustomUserClaims(userId, { role: 'PREMIUM' });

    // C·∫≠p nh·∫≠t th√¥ng tin trong Firestore
    await db.collection('users').doc(userId).update({
      userRole: 'PREMIUM',
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });

    res.status(200).json({
      message: 'User upgraded to Premium successfully',
      data: { userId, role: 'PREMIUM' }
    });
  } catch (error) {
    console.error('Error upgrading user:', error);
    res.status(500).json({ message: 'Error upgrading user role' });
  }
}

module.exports = {
  registerUser,
  loginUser,
  upgradeToPremium
};
